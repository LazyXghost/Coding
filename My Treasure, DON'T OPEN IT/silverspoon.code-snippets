{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Main tempelate for c++ code": {
		"prefix": "silverspoon-minimal",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"",
			"typedef long long ll;",
			"typedef long double ld;",
			"",
			"#define p(a,b) pair<a,b>",
			"#define pll pair<ll,ll>",
			"#define v(a) vector<a>",
			"#define vll vector<ll>",
			"#define s(a) set<a>",
			"#define ms(a) multiset<a>",
			"#define m(a,b) map<a,b>",
			"#define mm(a,b) multimap<a,b>",
			"",
			"#define FASTIO ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)",
			"#define tests(t) ll t; cin >> t; while(t--)",
			"#define loop(i, a, b, inc) for (ll i = a; i <= b; i+=inc)",
			"#define loopinv(i, a, b, dec) for (ll i = a; i >= b; i-=dec)",
			"#define iteratorloop(v, i) for(auto i = v.begin();i!=v.end();i++)",
			"#define iteratorloopinv(v, i) for(auto i = v.rbegin();i!=v.rend();i--)",
			"#define all(v) v.begin(),v.end()",
			"#define rall(v) v.rbegin(),v.rend()",
			"#define val(x) (*(x))",
			"#define space cout<<\" \";",
			"#define newline cout<< \"\\n\";",
			"",
			"#define cinv(v,n) v.resize(n,0);loop(i,0,n-1,1){cin>>v[i];}",
			"#define cin2d(v,n,m,dataType) v.resize(n,vector<dataType> (m,0));loop(i,0,n-1,1){loop(j,0,m-1,1){cin>>v[i][j];}}",
			"#define pyes(CONDITION) cout << (CONDITION ? \"YES\" : \"NO\") << \"\\n\";",
			"",
			"#ifndef ONLINE_JUDGE",
			"#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;",
			"#else",
			"#define debug(x)",
			"#endif",
			"",
			"void _print(ll t) {cerr << t;}",
			"void _print(int t) {cerr << t;}",
			"void _print(string t) {cerr << t;}",
			"void _print(char t) {cerr << t;}",
			"void _print(long double t) {cerr << t;}",
			"void _print(double t) {cerr << t;}",
			"",
			"template <class T, class V> void _print(pair <T, V> p) {cerr << \"(\"; _print(p.first); cerr << \",\"; _print(p.second); cerr << \")\";}",
			"template <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}",
			"template <class T> void _print(vector <vector <T>> v){cerr << \" => \\n[\\n\"; for (vector<T> i : v) {cerr<<\"  \";_print(i); cerr << endl;} cerr << \"]\";}",
			"template <class T> void _print(set <T> v) {cerr << \"{ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"}\";}",
			"template <class T> void _print(multiset <T> v) {cerr << \"{ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"}\";}",
			"template <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {cerr<< \"(\";_print(i.first); cerr << \"--> \"; _print(i.second);cerr<< \"),\";} cerr << \"]\";}",
			"template <class T, class V> void _print(unordered_map <T, V> v) {cerr << \"[ \"; for (auto i : v) {cerr<< \"(\";_print(i.first); cerr << \"--> \"; _print(i.second);cerr<< \"),\";} cerr << \"]\";}",
			"",
			"struct solution{",
			"    ll n;",
			"    v(ll) arr;",
			"    solution(){",
			"        cin>>n;",
			"        cinv(arr,n);",
			"        $0",
			"    }",
			"};",
			"int main()",
			"{",
			"    #ifndef ONLINE_JUDGE",
			"    freopen(\"Input.txt\", \"r\", stdin);",
			"    freopen(\"Output.txt\", \"w\", stdout);",
			"    freopen(\"Debug.txt\", \"w\", stderr);",
			"    #endif",
			"    FASTIO;",
			"    tests(t){",
			"        solution sol;",
			"    }",
			"    return 0;",
			"}"
		],
		"description": "Pair, vector, set, map, FASTIO, loop, iteratorloop, space, newline",
		"scope": "cpp"
	},
	"Second tempelate for c++ code": {
		"prefix": "silverspoon-maximal",
		"body": [
			"#define pqmax(a) priority_queue<a, vector<a>>",
			"#define pqmin(a) priority_queue<a, vector<a>, greater<a>>",
			"#define pqcustom(a) priority_queue<a, vector<a>, pqComp>",
			"#define fill(start, end, val) fill(start, end, val)",
			"#define fill(start, end, val) fill(start, end, val)",
			"#define removeScientific cout<<fixed;",
			"#define precision(a) cout<<setprecision(a);",
			"#define set_bits __builtin_popcountll",
			"const ll MOD = 1e9 + 7;",
			"const ll INF = LLONG_MAX;",
			"const ld pi = 3.14159265358979323846;",
			"// by default priority queue is made max heap, to use min heap use greater or make custom comparator",
			"// priority_queue<ll> - creates max heap",
			"// priority_queue<pair<ll,ll>> - ORDERING BY FIRST ELEMENT(if first elements are same then ordering by second elements)",
			"// priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,{COMPARATOR}>",
			"",
			"$0",
		],
		"description": "Priority Queue, fill, remove Scientific, setBitCount, MOD, INF, pi",
		"scope": "cpp"
	},
	"Comparators tempelate for complex c++ code": {
		"prefix": "silverspoon-comparatorsAndPower",
		"body": [
			"bool vComp(pair<ll, ll> a, pair<ll, ll> b)",
			"{",
            "    return a.first < b.first; // increasing order",
            "    // return a.first > b.first; // decreasing order",
			"}",
			"struct pqComp {",
			"    constexpr bool operator()(",
			"        pair<ll, ll> const& a,",
			"        pair<ll, ll> const& b)",
			"        const noexcept",
			"    {",
			"        return a.second < b.second; //max heap",
			"        // return a.second > b.second; //min heap",
			"    }",
			"};",
			"ll power(ll x,ll y){",
			"    ll res = 1;",
			"    while(y>0){",
			"        if(y&1)",
			"            res=(res*x);",
			"            // res=(res*x)%MOD;",
			"        y = y>>1;",
			"        x = x*x;",
			"        // x = (x*x)%MOD;",
			"    }",
			"    return res;",
			"}",
		],
		"description": "Vector comparator, priority queue comparator, power",
		"scope": "cpp"
	},
	"Max Segment Tree data structure tempelate": {
		"prefix": "silverspoon-segmentTree",
		"body": [
			"struct SegmentTree",
			"{",
			"    int leafNodes;",
			"    int stSize;",
			"    int leafStartingInd;",
			"    int levels;",
			"    vector<int> tree;",
			"    void buildTree()",
			"    {",
			"        int x = levels - 1;",
			"        while (x > 0)",
			"        {",
			"            int n = pow(2, x - 1);",
			"            int sti = n;",
			"            for (int i = 0; i < n; i++)",
			"            {",
			"                int ind = sti + i;",
			"                tree[ind] = max(tree[ind * 2], tree[ind * 2 + 1]);",
			"            }",
			"            x--;",
			"        }",
			"    }",
			"    void update(int ind, int x)",
			"    {",
			"        int i = leafStartingInd + ind;",
			"        tree[i] = x;",
			"        i = i / 2;",
			"        while (i != 0)",
			"        {",
			"            tree[i] = max(tree[2 * i], tree[2 * i + 1]);",
			"            i = i / 2;",
			"        }",
			"    }",
			"    int getMax()",
			"    {",
			"        return tree[1];",
			"    }",
			"    SegmentTree(const vector<int> &A, int x)",
			"    {",
			"        if (x == 1)",
			"            levels = 1;",
			"        else",
			"            levels = log2(x - 1) + 2;",
			"        leafNodes = pow(2, levels - 1);",
			"        stSize = 2 * leafNodes;",
			"        leafStartingInd = leafNodes;",
			"",
			"        tree.resize(stSize, INT_MIN);",
			"        for (int i = 0; i < x; i++)",
			"            tree[leafStartingInd + i] = A[i];",
			"",
			"        buildTree();",
			"    }",
			"};",
			"// SegmentTree st({1,2,3,5,6,7...}, 3);",
			"$0",
		],
		"description": "MaxSegmentTree data structure",
		"scope": "cpp"
	},
	"Disjoint set union data structures tempelate": {
		"prefix": "silverspoon-DSU",
		"body": [
			"// ============================= DSU ================================",
			"",
			"class dsu",
			"{",
			"    map<int,int> parent, size;",
			"",
			"public:",
			"    // making new set by just initialising the parent of set as the same number",
			"    void make_set(int v)",
			"    {",
			"        parent[v] = v;",
			"        size[v] = 1;",
			"    }",
			"",
			"    // finding the root of the set",
			"    int find_set(int v)",
			"    {",
			"        if (v == parent[v])",
			"            return v;",
			"        // return find_set(parent[v]);",
			"",
			"        return parent[v] = find_set(parent[v]);",
			"        // 1st optimisization - path compression",
			"        // directly connects all the linear chain nodes to parent",
			"        // 7->5->3->1 ==> 7->1,5->1,3->1",
			"    }",
			"",
			"    // making the root of one set as the parent of root of other set will combine two sets",
			"    void union_set(int a, int b)",
			"    {",
			"        a = find_set(a);",
			"        b = find_set(b);",
			"        if (a != b)",
			"        {",
			"            // 2nd optimisation - union by size",
			"            if (size[a] < size[b])",
			"                swap(a, b);",
			"",
			"            parent[b] = a;",
			"            size[a] += size[b];",
			"        }",
			"    }",
			"",
			"    // returning the size of the set of vertex v",
			"    int find_size(int v)",
			"    {",
			"        return size[find_set(v)];",
			"    }",
			"};",
			"/*",
			"Time complexity -",
			"                            AFTER OPTIMISATION'S",
			"    FIND SET  - O(n)      O(alpha(n)) - almost constant",
			"    MAKE SET  - O(1)              O(1)",
			"    UNION SET - O(n)           O(alpha(n))",
			"*/",
			"//==================================================================",
			"$0",
		],
		"description": "DSU structure",
		"scope": "cpp"
	},
	"Policy based data structures tempelate": {
		"prefix": "silverspoon-pbds_multiset",
		"body": [
			"// ---------------------------------Policy Based DataStructures----------------------",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"using namespace __gnu_pbds;",
			"", 
			"// defining template when all elements are distinct",
			"// oset<int> arr;",
			"template <class T> using oset = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;",
			"",
			"// defining template when duplicate elements are also used",
			"// omulset<int> arr;",
			"template <class T> using omulset = tree<T, null_type, less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;",
			"", 
			"//  .find_by_order(x) : index of the x element in the set starting from 0",
			"//  .order_of_key(x)  : number of elements strictly smaller than x in the set",
			"// --------------------------------",
			"$0",
		],
		"description": "Policy based data structure",
		"scope": "cpp"
	},
	"django code snippet for code block": {
		"prefix": "percentBrackets",
		"body": [
			"{% $0 %}"
		],
		"description": "brackets for django",
		"scope": "django-html"
	},
	"django code snippet for code block withing string": {
		"prefix": "percentBracketsWithinQuotes",
		"body": [
			"\"{% $0 %}\""
		],
		"description": "brackets for django",
		"scope": "django-html"
	}
}