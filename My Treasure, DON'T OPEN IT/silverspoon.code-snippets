{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Main tempelate for any c++ code": {
		"prefix": "silverspoon",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			"",
			"// typedef is used to give datatype a newname",
			"typedef long long ll;",
			"typedef long double ld;",
			"#define INF (__builtin_inff ())",
			"#define p(a,b) pair<a,b>",
			"#define v(a) vector<a>",
			"#define vv(a) vector<vector<a>>",
			"#define s(a) set<a>",
			"#define ms(a) multiset<a>",
			"#define us(a) unordered_set<a>",
			"#define m(a,b) map<a,b>",
			"#define um(a,b) unordered_map<a,b>",
			"#define mm(a,b) multimap<a,b>",
			"",
			"// define is used to give things an alias",
			"#define FASTIO ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)",
			"#define fill(start, end, val) fill(start, end, val)",
			"",
			"#define tests(t) int t; cin >> t; while(t--)",
			"#define loop(i, a, b) for (int i = a; i <= b; i++)",
			"#define iteratorloop(v, i) for(auto i = v.begin();i!=v.end();i++)",
			"#define inputArray(arr, n, i) for(int i = 0;i<n;i++){input(arr[i])}",
			"#define inputVector(v, n, i) for(int i = 0;i<n;i++){int x;input(x);v.push_back(x);}",
			"#define val(x) (*(x))",
			"",
			"#define printArray(arr, n, i) for(int i = 0;i<n;i++){print(arr[i]);space;}newline;",
			"#define printVector(v, i) for(auto i = v.begin();i!=v.end();i++){print(val(i));space;}newline;",
			"#define space cout<<\" \";",
			"#define newline cout<< \"\\n\";",
			"",
			"const ll MOD = 1e9 + 7;",
			"",
			"bool comparator(p(int,int) a, p(int,int) b){",
			"    return (a.first < b.first);",
			"}",
			"",
			"// fill funtion can be used to fill anything with a value",
			"// fill(arr, arr+n, {FILLING VALUE})",
			"// fill(v.begin(),v.end(),{FILLING VALUE})",
			"// vector<int> v({SIZE OF VECTOR}, {FILLING VALUE}) ",
			"// vector<int> v({SIZE OF VECTOR})",
			"",
			"int main()",
			"{",
			"    FASTIO;",
			"    $0",
			"    return 0;",
			"}"
		],
		"description": "Starting snippet",
		"scope": "cpp"
	},
	"cpp code for graphs": {
		"prefix": "graph",
		"body": [
			"vector<vector<int>> graph(${1:n});",
			"for(int i=0;i<${1:n};i++)",
			"{",
			"    int x,y;",
			"    cin>>x>>y;",
			"    graph[x].push_back(y);",
			"    graph[y].push_back(x);",
			"}$0"
		],
		"description": "graph template for cpp",
		"scope": "cpp"
	},
	"django code snippet for code block": {
		"prefix": "percentBrackets",
		"body": [
			"{% $0 %}"
		],
		"description": "brackets for django",
		"scope": "django-html"
	},
	"django code snippet for code block withing string": {
		"prefix": "percentBracketsWithinQuotes",
		"body": [
			"\"{% $0 %}\""
		],
		"description": "brackets for django",
		"scope": "django-html"
	}
}
